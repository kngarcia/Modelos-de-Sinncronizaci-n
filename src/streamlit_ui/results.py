import streamlit as st
from src.utils import calculate_metrics

def display_main_metrics(results):
    """Muestra las m√©tricas principales en columnas"""
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("üéØ Sincronizaci√≥n Final")
        for name, result in results.items():
            final_R = result['final_R']
            color = "üü¢" if final_R > 0.8 else "üü°" if final_R > 0.5 else "üî¥"
            st.metric(
                f"{color} {name}", 
                f"{final_R:.3f}",
                help="R = 1: sincronizaci√≥n perfecta, R = 0: desorden completo"
            )
    
    with col2:
        st.subheader("‚è±Ô∏è Velocidad")
        for name, result in results.items():
            metrics = calculate_metrics(result)
            sync_time = metrics.get('time_to_90', result['history_time'][-1])
            st.metric(
                f"‚è∞ {name}", 
                f"{sync_time:.2f}s",
                help="Tiempo para alcanzar R ‚â• 0.9"
            )
    
    with col3:
        st.subheader("üèÜ Comparaci√≥n")
        best_model = max(results.items(), key=lambda x: x[1]['final_R'])
        worst_model = min(results.items(), key=lambda x: x[1]['final_R'])
        
        st.success(f"**Mejor:** {best_model[0]} (R={best_model[1]['final_R']:.3f})")
        st.warning(f"**Peor:** {worst_model[0]} (R={worst_model[1]['final_R']:.3f})")
        
        if best_model[0] == "Kuramoto":
            st.info("‚úÖ Comportamiento esperado: Kuramoto sincroniza mejor")
        else:
            st.warning("‚ö†Ô∏è Comportamiento inesperado: Revisar par√°metros")

def display_detailed_metrics(results, steps):
    """Muestra m√©tricas detalladas en pesta√±as"""
    
    for name, result in results.items():
        with st.expander(f"üìä {name} - M√©tricas Detalladas", expanded=False):
            metrics = calculate_metrics(result)
            
            col_metrics1, col_metrics2, col_metrics3 = st.columns(3)
            
            with col_metrics1:
                st.markdown("**üìà Sincronizaci√≥n**")
                st.metric("Final", f"{metrics['final_sync']:.4f}")
                st.metric("M√°xima", f"{metrics['max_sync']:.4f}")
                st.metric("Promedio", f"{metrics['avg_sync']:.4f}")
            
            with col_metrics2:
                st.markdown("**‚è±Ô∏è Tiempos de Sincronizaci√≥n**")
                for threshold in [50, 80, 90]:
                    time_val = metrics.get(f'time_to_{threshold}', result['history_time'][-1])
                    st.metric(f"R ‚â• {threshold}%", f"{time_val:.2f}s")
            
            with col_metrics3:
                st.markdown("**üìä Estabilidad**")
                st.metric("Estabilidad", f"{metrics['sync_stability']:.4f}")
                st.metric("Pasos totales", steps)
                st.metric("Tiempo simulado", f"{result['history_time'][-1]:.2f}s")

def display_diagnostic_info(results):
    """Muestra informaci√≥n de diagn√≥stico"""
    
    with st.expander("üîç Informaci√≥n de Diagn√≥stico", expanded=False):
        st.write("**Par√°metros usados en la simulaci√≥n:**")
        st.json(results[list(results.keys())[0]]['parameters'])
        
        st.write("**Resumen de ejecuci√≥n:**")
        for name, result in results.items():
            st.write(f"- **{name}**: {len(result['history_phases'])} estados, R final = {result['final_R']:.4f}")